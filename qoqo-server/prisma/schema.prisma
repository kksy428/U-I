generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String
  phone_num    String        @unique
  email        String        @unique
  password     String
  role         String
  gym_name     String
  user_image   String        @default("/images/users/default.jpg")
  created_at   DateTime      @default(now())
  reservations Reservation[]
  usages       Usage[]
}

model Equipment {
  id           Int           @id @default(autoincrement())
  equip_name   String
  equip_type   String
  equip_image  String
  gym_name     String
  is_active    Boolean       @default(true)
  reservations Reservation[]
  usages       Usage[]
}

model Reservation {
  id            Int               @id @default(autoincrement())
  equipment_id  Int
  user_id       Int
  desired_time  Int
  reserved_time DateTime?          @default(now())
  late_policy   String
  is_active     Boolean           @default(true)
  status        ReservationStatus @default(WAITING)
  equipment     Equipment         @relation(fields: [equipment_id], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([equipment_id], map: "Reservation_equipment_id_fkey")
  @@index([user_id], map: "Reservation_user_id_fkey")
}

model Usage {
  id           Int       @id @default(autoincrement())
  equipment_id Int
  user_id      Int
  start_time   DateTime?
  end_time     DateTime?
  is_active    Boolean   @default(true)

  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  equipment    Equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade)

  @@index([equipment_id], map: "Usage_equipment_id_fkey")
}

enum ReservationStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  SKIPPED
  ONE_SKIPPED
}
